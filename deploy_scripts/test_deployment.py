#!/usr/bin/env python3
"""
Deployment Test Script for HackRx 6.0
Tests all critical components before deployment
"""

import asyncio
import sys
import os
from pathlib import Path

def test_imports():
    """Test all critical imports"""
    print("üîç Testing imports...")
    
    try:
        import fastapi
        print("‚úÖ FastAPI imported successfully")
    except ImportError as e:
        print(f"‚ùå FastAPI import failed: {e}")
        return False
    
    try:
        import uvicorn
        print("‚úÖ Uvicorn imported successfully")
    except ImportError as e:
        print(f"‚ùå Uvicorn import failed: {e}")
        return False
    
    try:
        import openai
        print("‚úÖ OpenAI imported successfully")
    except ImportError as e:
        print(f"‚ùå OpenAI import failed: {e}")
        return False
    
    try:
        import groq
        print("‚úÖ Groq imported successfully")
    except ImportError as e:
        print(f"‚ùå Groq import failed: {e}")
        return False
    
    try:
        import pinecone
        print("‚úÖ Pinecone imported successfully")
    except ImportError as e:
        print(f"‚ùå Pinecone import failed: {e}")
        return False
    
    try:
        import httpx
        print("‚úÖ HTTPX imported successfully")
    except ImportError as e:
        print(f"‚ùå HTTPX import failed: {e}")
        return False
    
    return True

def test_config():
    """Test configuration loading"""
    print("\nüîß Testing configuration...")
    
    try:
        from config import settings
        print("‚úÖ Configuration loaded successfully")
        print(f"   - API Key: {'Set' if settings.api_key else 'Not set'}")
        print(f"   - OpenAI: {'Set' if settings.openai_api_key else 'Not set'}")
        print(f"   - Groq: {'Set' if settings.groq_api_key else 'Not set'}")
        print(f"   - Pinecone: {'Set' if settings.pinecone_api_key else 'Not set'}")
        return True
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False

def test_app_components():
    """Test app components"""
    print("\nüèóÔ∏è Testing app components...")
    
    try:
        from app.models import QueryRequest, QueryResponse
        print("‚úÖ Models imported successfully")
    except Exception as e:
        print(f"‚ùå Models import failed: {e}")
        return False
    
    try:
        from app.auth import verify_api_key
        print("‚úÖ Auth imported successfully")
    except Exception as e:
        print(f"‚ùå Auth import failed: {e}")
        return False
    
    try:
        from app.query_engine import QueryEngine
        print("‚úÖ QueryEngine imported successfully")
    except Exception as e:
        print(f"‚ùå QueryEngine import failed: {e}")
        return False
    
    try:
        from app.document_processor import DocumentProcessor
        print("‚úÖ DocumentProcessor imported successfully")
    except Exception as e:
        print(f"‚ùå DocumentProcessor import failed: {e}")
        return False
    
    try:
        from app.vector_store import VectorStore
        print("‚úÖ VectorStore imported successfully")
    except Exception as e:
        print(f"‚ùå VectorStore import failed: {e}")
        return False
    
    try:
        from app.llm_processor import LLMProcessor
        print("‚úÖ LLMProcessor imported successfully")
    except Exception as e:
        print(f"‚ùå LLMProcessor import failed: {e}")
        return False
    
    return True

def test_deployment_files():
    """Test deployment files exist"""
    print("\nüìÅ Testing deployment files...")
    
    required_files = [
        "main.py",
        "config.py",
        "requirements.txt",
        "Procfile",
        "runtime.txt",
        "README.md",
        ".gitignore"
    ]
    
    for file in required_files:
        if Path(file).exists():
            print(f"‚úÖ {file} exists")
        else:
            print(f"‚ùå {file} missing")
            return False
    
    return True

def test_app_structure():
    """Test app directory structure"""
    print("\nüìÇ Testing app structure...")
    
    required_app_files = [
        "app/__init__.py",
        "app/models.py",
        "app/auth.py",
        "app/query_engine.py",
        "app/document_processor.py",
        "app/vector_store.py",
        "app/llm_processor.py",
        "app/fallback_search.py"
    ]
    
    for file in required_app_files:
        if Path(file).exists():
            print(f"‚úÖ {file} exists")
        else:
            print(f"‚ùå {file} missing")
            return False
    
    return True

async def test_basic_functionality():
    """Test basic functionality"""
    print("\n‚ö° Testing basic functionality...")
    
    try:
        from app.query_engine import QueryEngine
        engine = QueryEngine()
        print("‚úÖ QueryEngine initialized successfully")
        
        # Test health check
        health = await engine.health_check()
        print(f"‚úÖ Health check: {health}")
        
        return True
    except Exception as e:
        print(f"‚ùå Basic functionality test failed: {e}")
        return False

def main():
    """Run all tests"""
    print("üöÄ HackRx 6.0 Deployment Test")
    print("=" * 40)
    
    tests = [
        test_imports,
        test_config,
        test_app_components,
        test_deployment_files,
        test_app_structure,
        lambda: asyncio.run(test_basic_functionality())
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        else:
            print(f"‚ùå Test failed: {test.__name__}")
    
    print("\n" + "=" * 40)
    print(f"üìä Test Results: {passed}/{total} passed")
    
    if passed == total:
        print("üéâ All tests passed! Ready for deployment.")
        return True
    else:
        print("‚ùå Some tests failed. Please fix issues before deployment.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 